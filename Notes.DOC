step-1
    first create a java project 
    add dependencies - mysql driver, spring data jpa

step-2
    create entity for create table in data base 
    add @Entity anotation first 
    create a field such as id, name, city, status
    id may ne auto intcrement using anotation
    ex : 
        @id
        @GeneratedValue(Strategy = Generatedtype.Auto)
        Private int id;
        Private String name;    ;
        Private String city;
        Private String status;

step-3 
    create package insaid main package name dao
    create insaid dao file name UserRepository 
    create interface name UserRepository and extends CrudRepository<User, Integer>

    ex : public interface UserRepository extends CrudRepository<User, Integer>
    explanation :=
    public interface UserRepository:
        This declares a Java interface named UserRepository. 
        An interface in Java is like a contract or a set of rules that a class can follow.

    extends CrudRepository<User, Integer>:
        This means that UserRepository is extending (or inheriting from) another interface called CrudRepository. 
        The CrudRepository interface is a part of the Spring Data JPA framework, and it provides basic CRUD (Create, Read, Update, Delete) operations for working with a database.

    User:
        This is the type of entity that the repository (UserRepository) will manage. 
        An entity in this context typically represents a record or a row in a database table.

    Integer: 
        This specifies the type of the identifier (or primary key) of the User entity. 
        The Integer type implies that the identifier is expected to be an integer value.

    So, in simple words, this line is defining a contract (UserRepository) that uses the Spring Data JPA framework (CrudRepository) to perform standard database operations on entities of type User, where each User has an identifier of type Integer. This interface allows you to interact with a database table of User entities in a convenient way without having to write all the database access code manually.

step-4
    datasource configuration with mysql
        spring.datasource.name=test
        spring.datasource.url=jdbc:mysql://localhost:3306/test
        spring.datasource.username=root
        # spring.datasource.password=""
        spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
        spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect
        spring.jpa.hibernate.ddl-auto=update
        
        spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect
        spring.jpa.properties.hibernate.dialect=: 
            This is specifying a Hibernate configuration property. Hibernate is an Object-Relational Mapping (ORM) framework, and the dialect property is used to specify the type of SQL that should be generated by Hibernate for a specific database.

        org.hibernate.dialect.MySQLDialect: 
            This is the specific dialect chosen for MySQL. Hibernate needs to know the dialect to generate appropriate SQL statements compatible with the MySQL database. The MySQLDialect class provides Hibernate with the necessary information about MySQL-specific SQL syntax and features.

        So, in simple terms, this configuration line is telling the Spring Boot application to use the Hibernate dialect for MySQL when interacting with the database. It ensures that Hibernate generates SQL statements that are suitable for MySQL databases.